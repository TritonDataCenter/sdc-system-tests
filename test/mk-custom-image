#!/bin/bash
#
# Make a custom image via CloudAPI, for testing.
#
# Usage:
#   ./mk-custom-image <base-image-uuid> <motd> <manifest-json>
#
# Where 'motd' is the string to put in /etc/motd (the sole customization).
#
# Example:
#   ./mk-custom-image f669428c-a939-11e2-a485-b790efc0f0c1 \
#       'blah blah' \
#       '{"name":"foo","version":"1.0.0"}'
#
# This will:
# - sdc-imgadm import the base image, if necessary (from images.joyent.com)
# - CreateMachine
# - ssh in, customize it (just set /etc/motd), sm-prepare-image
# - CreateImageFromMachine
# - "return" the create image uuid
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

export PATH=/usr/bin:/usr/sbin:/smartdc/bin:/opt/smartdc/bin:/opt/local/bin:/opt/local/sbin:/opt/smartdc/agents/bin



#---- support stuff

function fatal {
    echo "$0: fatal error: $*"
    exit 1
}

function cleanup {
    true
}

function errexit {
    cleanup
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1"
}

function install_image {
    local uuid=$1
    sdc-imgadm get $uuid >/dev/null 2>/dev/null && return
    echo "Installing image $uuid from images.joyent.com"
    sdc-imgadm import $uuid -S https://images.joyent.com --skip-owner-check
}

function delete_proto_machine {
    local proto_uuid=$(sdc sdc-cloudapi /my/machines \
        | json -H -c "this.name=='proto'" 0.id)
    if [[ -n "$proto_uuid" ]]; then
        echo "Delete existing proto zone (uuid $proto_uuid)"
        echo '```'
        sdc-vmapi /vms/$proto_uuid -X DELETE | sdc sdc-waitforjob
        echo '```'
    fi
}

function create_proto_machine {
    proto_uuid=
    local image_uuid=$1
    echo "Create proto machine from image $image_uuid"
    local package_uuid=$(sdc sdc-cloudapi /my/packages \
        | json -H -c 'this.memory === 256' 0.id)
    local network_uuid=$(sdc sdc-cloudapi /my/networks | json -H 0.id)

    local response=$(cat <<EOM | sdc sdc-cloudapi /my/machines -X POST -d@-
{
    "name": "proto",
    "package": "$package_uuid",
    "image": "$image_uuid",
    "networks": ["$network_uuid"]
}
EOM
)
    proto_uuid=$(echo "$response" | json -H id)
    [[ -n "$proto_uuid" ]] || fatal "unexpected CreateMachine response: $response"

    # Wait for it to provision.
    local proto_state
    for i in {1..180}; do
        sleep 2
        echo -n '.'
        proto_state=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H state)
        if [[ "$proto_state" != "provisioning" ]]; then
            echo ""
            break
        fi
    done
    proto_state=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H state)
    if [[ $proto_state == "running" ]]; then
        echo "Proto machine $proto_uuid provisioned"
    else
        echo ""
        fatal "Proto machine $proto_uuid provision failed or timed out: $proto_state"
    fi
}


function customize_and_prepare_proto_machine {
    local proto_uuid=$1
    local motd="$2"
    echo "Customize and prep proto machine with '$motd' motd"
    local proto_ip=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H ips.0)
    sdc ssh -T -q -i /root/.ssh/sdc.id_rsa \
        -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        $proto_ip \
        "echo \"$2\" >/etc/motd; sm-prepare-image -y"

    # Wait for machine to stop.
    local proto_state
    for i in {1..180}; do
        sleep 2
        echo -n '.'
        proto_state=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H state)
        if [[ "$proto_state" == "stopped" ]]; then
            echo ""
            break
        fi
    done
    proto_state=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H state)
    if [[ $proto_state == "stopped" ]]; then
        echo "Proto machine $proto_uuid customized and stopped"
    else
        echo ""
        fatal "Proto machine $proto_uuid failed to stop: $proto_state"
    fi
}

function create_image {
    custom_image_uuid=
    local proto_uuid="$1"
    local manifest_json="$2"

    local data=$(echo "$manifest_json" | json -e "this.machine = '$proto_uuid'")
    local response=$(echo "$data" | sdc sdc-cloudapi /my/images -X POST -d@-)
    #XXX expect a 201 (200?)
    echo '```'
    echo "$response"
    echo '```'
    custom_image_uuid=$(echo "$response" | json -H id)
    if [[ -z "$custom_image_uuid" ]]; then
        fatal "error getting custom image uuid from CreateImageFromMachine res"
    fi

    # Wait for image to be published.
    # Bad *current* limitation: a 404 on /my/images/UUID means either "still
    # creating" or "creation failed". Can't distinguish right now.
    local image_published_at
    for i in {1..180}; do
        sleep 2
        echo -n '.'
        image_published_at=$(sdc sdc-cloudapi /my/images/$custom_image_uuid \
            | json -H published_at)
        if [[ -n "$image_published_at" ]]; then
            echo ""
            break
        fi
    done
    image_published_at=$(sdc sdc-cloudapi /my/images/$custom_image_uuid \
        | json -H published_at)
    if [[ -n "$image_published_at" ]]; then
        echo "Custom image $custom_image_uuid published"
    else
        echo ""
        fatal "Custom image $custom_image_uuid failed to be published"
    fi
}



#---- mainline

trap 'errexit $?' EXIT
START=$(date +%s)

BASE_IMAGE_UUID=$1
shift
MOTD=$1
shift
MANIFEST_JSON=$1
shift
[[ -z "$BASE_IMAGE_UUID" ]] && fatal "no <base-image-uuid> given"
[[ -z "$MOTD" ]] && fatal "no <motd> given"
[[ -z "$MANIFEST_JSON" ]] && fatal "no <manifest-json> given"

echo "Make custom image from image $BASE_IMAGE_UUID"

install_image $BASE_IMAGE_UUID
delete_proto_machine
create_proto_machine $BASE_IMAGE_UUID  # sets 'proto_uuid'
customize_and_prepare_proto_machine $proto_uuid "$MOTD"
create_image $proto_uuid "$MANIFEST_JSON"  # sets 'custom_image_uuid'
delete_proto_machine


END=$(date +%s)
echo "$0 finished in $(($END - $START)) seconds"

# "Return" the UUID of the created custom image.
echo "$custom_image_uuid"
